// <auto-generated />
using System;
using Gestion_Administrativa_Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gestion_Administrativa_Api.Migrations
{
    [DbContext(typeof(_context))]
    partial class _contextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Ciudades", b =>
                {
                    b.Property<Guid>("IdCiudad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idCiudad")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdProvincia")
                        .HasColumnType("uuid")
                        .HasColumnName("idProvincia");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdCiudad")
                        .HasName("ciudades_pkey");

                    b.HasIndex("IdProvincia");

                    b.ToTable("ciudades", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Clientes", b =>
                {
                    b.Property<Guid>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idCliente")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Direccion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdCiudad")
                        .HasColumnType("uuid")
                        .HasColumnName("idCiudad");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid?>("IdTipoIdentificacion")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoIdentificacion");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("identificacion");

                    b.Property<string>("Observacion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observacion");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("razonSocial");

                    b.Property<string>("Telefono")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("telefono");

                    b.HasKey("IdCliente")
                        .HasName("clientes_pkey");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdTipoIdentificacion");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetalleFacturas", b =>
                {
                    b.Property<Guid>("IdDetalleFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idDetalleFactura")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("Cantidad")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cantidad");

                    b.Property<decimal?>("Descuento")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("descuento");

                    b.Property<Guid>("IdFactura")
                        .HasColumnType("uuid")
                        .HasColumnName("idFactura");

                    b.Property<Guid>("IdIva")
                        .HasColumnType("uuid")
                        .HasColumnName("idIva");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uuid")
                        .HasColumnName("idProducto");

                    b.Property<decimal?>("Porcentaje")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("porcentaje");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("precio");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal?>("Total")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total");

                    b.Property<decimal?>("ValorPorcentaje")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("valorPorcentaje");

                    b.HasKey("IdDetalleFactura")
                        .HasName("detalleFacturas_pkey");

                    b.HasIndex("IdFactura");

                    b.ToTable("detalleFacturas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetalleFormaPagos", b =>
                {
                    b.Property<Guid>("IdDetalleFormaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idDetalleFormaPago")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("IdFactura")
                        .HasColumnType("uuid")
                        .HasColumnName("idFactura");

                    b.Property<Guid>("IdFormaPago")
                        .HasColumnType("uuid")
                        .HasColumnName("idFormaPago");

                    b.Property<Guid>("IdTiempoFormaPago")
                        .HasColumnType("uuid")
                        .HasColumnName("idTiempoFormaPago");

                    b.Property<decimal>("Plazo")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("plazo");

                    b.Property<decimal>("Valor")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("valor");

                    b.HasKey("IdDetalleFormaPago")
                        .HasName("detalleFormaPagos_pkey");

                    b.HasIndex("IdFactura");

                    b.HasIndex("IdTiempoFormaPago");

                    b.ToTable("detalleFormaPagos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetallePrecioProductos", b =>
                {
                    b.Property<Guid>("IdDetallePrecioProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idDetallePrecioProducto")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdIva")
                        .HasColumnType("uuid")
                        .HasColumnName("idIva");

                    b.Property<Guid?>("IdProducto")
                        .HasColumnType("uuid")
                        .HasColumnName("idProducto");

                    b.Property<decimal?>("Porcentaje")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("porcentaje");

                    b.Property<decimal?>("Total")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total");

                    b.Property<decimal?>("TotalIva")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalIva");

                    b.HasKey("IdDetallePrecioProducto")
                        .HasName("detallePrecioProductos_pkey");

                    b.HasIndex("IdIva");

                    b.HasIndex("IdProducto");

                    b.ToTable("detallePrecioProductos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetalleProformas", b =>
                {
                    b.Property<Guid>("IdDetalleProforma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idDetalleProforma")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("Cantidad")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cantidad");

                    b.Property<decimal?>("Descuento")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("descuento");

                    b.Property<Guid>("IdIva")
                        .HasColumnType("uuid")
                        .HasColumnName("idIva");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uuid")
                        .HasColumnName("idProducto");

                    b.Property<Guid>("IdProforma")
                        .HasColumnType("uuid")
                        .HasColumnName("idProforma");

                    b.Property<decimal?>("Porcentaje")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("porcentaje");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("precio");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal?>("Total")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total");

                    b.Property<decimal?>("ValorPorcentaje")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("valorPorcentaje");

                    b.HasKey("IdDetalleProforma")
                        .HasName("detalleProformas_pkey");

                    b.HasIndex("IdProforma");

                    b.ToTable("detalleProformas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DocumentosEmitir", b =>
                {
                    b.Property<Guid>("IdDocumentoEmitir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idDocumentoEmitir")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdTipoDocumento")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoDocumento");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdDocumentoEmitir")
                        .HasName("documentosEmitir_pkey");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("documentosEmitir", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Empleados", b =>
                {
                    b.Property<Guid>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpleado")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Direccion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdCiudad")
                        .HasColumnType("uuid")
                        .HasColumnName("idCiudad");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid?>("IdTipoIdentificacion")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoIdentificacion");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("identificacion");

                    b.Property<string>("Observacion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observacion");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("razonSocial");

                    b.Property<string>("Telefono")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("telefono");

                    b.HasKey("IdEmpleado")
                        .HasName("empleados_pkey");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdTipoIdentificacion");

                    b.ToTable("empleados", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Empresas", b =>
                {
                    b.Property<Guid>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("AgenteRetencion")
                        .HasColumnType("boolean")
                        .HasColumnName("agenteRetencion");

                    b.Property<string>("DireccionMatriz")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("direccionMatriz");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdInformacionFirma")
                        .HasColumnType("uuid")
                        .HasColumnName("idInformacionFirma");

                    b.Property<Guid?>("IdTipoNegocio")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoNegocio");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("identificacion");

                    b.Property<bool?>("LlevaContabilidad")
                        .HasColumnType("boolean")
                        .HasColumnName("llevaContabilidad");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("razonSocial");

                    b.Property<bool?>("RegimenMicroEmpresas")
                        .HasColumnType("boolean")
                        .HasColumnName("regimenMicroEmpresas");

                    b.Property<bool?>("RegimenRimpe")
                        .HasColumnType("boolean")
                        .HasColumnName("regimenRimpe");

                    b.Property<string>("ResolucionAgenteRetencion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("resolucionAgenteRetencion");

                    b.Property<string>("Telefono")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("telefono");

                    b.HasKey("IdEmpresa")
                        .HasName("empresas_pkey");

                    b.HasIndex("IdInformacionFirma");

                    b.HasIndex("IdTipoNegocio");

                    b.ToTable("empresas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Establecimientos", b =>
                {
                    b.Property<Guid>("IdEstablecimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idEstablecimiento")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("direccion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<long?>("Nombre")
                        .HasColumnType("bigint")
                        .HasColumnName("nombre");

                    b.Property<bool?>("Predeterminado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("predeterminado")
                        .HasDefaultValueSql("false");

                    b.HasKey("IdEstablecimiento")
                        .HasName("establecimientos_pkey");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("establecimientos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Facturas", b =>
                {
                    b.Property<Guid>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idFactura")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("AgenteRetencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("agenteRetencion")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("Ambiente")
                        .HasColumnType("integer")
                        .HasColumnName("ambiente");

                    b.Property<decimal?>("Cambio")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cambio");

                    b.Property<string>("ClaveAcceso")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("claveAcceso");

                    b.Property<int?>("CodigoDocModificado")
                        .HasColumnType("integer")
                        .HasColumnName("codigoDocModificado");

                    b.Property<string>("ContribuyenteEspecial")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contribuyenteEspecial");

                    b.Property<bool?>("ContribuyenteRimpe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("contribuyenteRimpe")
                        .HasDefaultValueSql("false");

                    b.Property<string>("DireccionEstablecimiento")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("direccionEstablecimiento");

                    b.Property<string>("DireccionMatriz")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("direccionMatriz");

                    b.Property<string>("EmisorRazonSocial")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("emisorRazonSocial");

                    b.Property<string>("EmisorRuc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("emisorRuc");

                    b.Property<int?>("Establecimiento")
                        .HasColumnType("integer")
                        .HasColumnName("establecimiento");

                    b.Property<decimal?>("ExentoIva")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("exentoIva");

                    b.Property<DateTime?>("FechaAutorizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaAutorizacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaEmision")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Ice")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("ice");

                    b.Property<Guid>("IdCiudad")
                        .HasColumnType("uuid")
                        .HasColumnName("idCiudad");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uuid")
                        .HasColumnName("idCliente");

                    b.Property<Guid>("IdDocumentoEmitir")
                        .HasColumnType("uuid")
                        .HasColumnName("idDocumentoEmitir");

                    b.Property<Guid>("IdEstablecimiento")
                        .HasColumnType("uuid")
                        .HasColumnName("idEstablecimiento");

                    b.Property<Guid>("IdPuntoEmision")
                        .HasColumnType("uuid")
                        .HasColumnName("idPuntoEmision");

                    b.Property<int>("IdTipoEstadoDocumento")
                        .HasColumnType("integer")
                        .HasColumnName("idTipoEstadoDocumento");

                    b.Property<int?>("IdTipoEstadoSri")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idTipoEstadoSri");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idUsuario");

                    b.Property<decimal?>("Irbpnr")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("irbpnr");

                    b.Property<decimal?>("Isd")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("isd");

                    b.Property<decimal?>("Iva12")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("iva12");

                    b.Property<string>("Mensaje")
                        .HasColumnType("text")
                        .HasColumnName("mensaje");

                    b.Property<string>("Moneda")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("moneda");

                    b.Property<bool?>("ObligadoContabilidad")
                        .HasColumnType("boolean")
                        .HasColumnName("obligadoContabilidad");

                    b.Property<int?>("PuntoEmision")
                        .HasColumnType("integer")
                        .HasColumnName("puntoEmision");

                    b.Property<string>("ReceptorCorreo")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("receptorCorreo");

                    b.Property<string>("ReceptorDireccion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("receptorDireccion");

                    b.Property<string>("ReceptorRazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("receptorRazonSocial");

                    b.Property<string>("ReceptorRuc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("receptorRuc");

                    b.Property<string>("ReceptorTelefono")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("receptorTelefono");

                    b.Property<int?>("ReceptorTipoIdentificacion")
                        .HasColumnType("integer")
                        .HasColumnName("receptorTipoIdentificacion");

                    b.Property<bool?>("RegimenMicroempresas")
                        .HasColumnType("boolean")
                        .HasColumnName("regimenMicroempresas");

                    b.Property<bool?>("RegimenRimpe")
                        .HasColumnType("boolean")
                        .HasColumnName("regimenRimpe");

                    b.Property<string>("ResolucionAgenteRetencion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("resolucionAgenteRetencion");

                    b.Property<string>("Ruta")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ruta");

                    b.Property<decimal?>("Saldo")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("saldo");

                    b.Property<int?>("Secuencial")
                        .HasColumnType("integer")
                        .HasColumnName("secuencial");

                    b.Property<decimal?>("Subtotal0")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("subtotal0");

                    b.Property<decimal?>("Subtotal12")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("subtotal12");

                    b.Property<int?>("TipoDocumento")
                        .HasColumnType("integer")
                        .HasColumnName("tipoDocumento");

                    b.Property<int?>("TipoEmision")
                        .HasColumnType("integer")
                        .HasColumnName("tipoEmision");

                    b.Property<decimal?>("TotalDescuento")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalDescuento");

                    b.Property<decimal?>("TotalImporte")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalImporte");

                    b.Property<decimal?>("TotalSinImpuesto")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalSinImpuesto");

                    b.Property<decimal?>("ValorRecibido")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("valorRecibido");

                    b.Property<string>("VersionXml")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("versionXml");

                    b.HasKey("IdFactura")
                        .HasName("facturas_pkey");

                    b.HasIndex("IdTipoEstadoDocumento");

                    b.HasIndex("IdTipoEstadoSri");

                    b.HasIndex("IdUsuario");

                    b.ToTable("facturas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.FormaPagos", b =>
                {
                    b.Property<Guid>("IdFormaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idFormaPago")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdFormaPago")
                        .HasName("formaPagos_pkey");

                    b.ToTable("formaPagos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.InformacionAdicional", b =>
                {
                    b.Property<Guid>("IdInformacionAdicional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idInformacionAdicional")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("IdFactura")
                        .HasColumnType("uuid")
                        .HasColumnName("idFactura");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.Property<string>("Valor")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("valor");

                    b.HasKey("IdInformacionAdicional")
                        .HasName("informacionAdicional_pkey");

                    b.HasIndex("IdFactura");

                    b.ToTable("informacionAdicional", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.InformacionFirmas", b =>
                {
                    b.Property<Guid>("IdInformacionFirma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idInformacionFirma")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Codigo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("codigo");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("identificacion");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("razonSocial");

                    b.Property<string>("Ruta")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ruta");

                    b.HasKey("IdInformacionFirma")
                        .HasName("informacionFirmas_pkey");

                    b.ToTable("informacionFirmas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Ivas", b =>
                {
                    b.Property<Guid>("IdIva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idIva")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("Valor")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("valor");

                    b.HasKey("IdIva")
                        .HasName("ivas_pkey");

                    b.ToTable("ivas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Productos", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idProducto")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("ActivoProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activoProducto")
                        .HasDefaultValueSql("true");

                    b.Property<decimal?>("Cantidad")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("cantidad");

                    b.Property<string>("Codigo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid?>("IdIva")
                        .HasColumnType("uuid")
                        .HasColumnName("idIva");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("precio");

                    b.Property<decimal?>("TotalIva")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalIva");

                    b.HasKey("IdProducto")
                        .HasName("productos_pkey");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdIva");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Proformas", b =>
                {
                    b.Property<Guid>("IdProforma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idProforma")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Ambiente")
                        .HasColumnType("integer")
                        .HasColumnName("ambiente");

                    b.Property<int?>("Establecimiento")
                        .HasColumnType("integer")
                        .HasColumnName("establecimiento");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("IdEstablecimiento")
                        .HasColumnType("uuid")
                        .HasColumnName("idEstablecimiento");

                    b.Property<Guid>("IdPuntoEmision")
                        .HasColumnType("uuid")
                        .HasColumnName("idPuntoEmision");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idUsuario");

                    b.Property<string>("Moneda")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("moneda");

                    b.Property<int?>("PuntoEmision")
                        .HasColumnType("integer")
                        .HasColumnName("puntoEmision");

                    b.Property<string>("ReceptorCorreo")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("receptorCorreo");

                    b.Property<string>("ReceptorDireccion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("receptorDireccion");

                    b.Property<string>("ReceptorRazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("receptorRazonSocial");

                    b.Property<string>("ReceptorRuc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("receptorRuc");

                    b.Property<string>("ReceptorTelefono")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("receptorTelefono");

                    b.Property<int?>("ReceptorTipoIdentificacion")
                        .HasColumnType("integer")
                        .HasColumnName("receptorTipoIdentificacion");

                    b.Property<int?>("Secuencial")
                        .HasColumnType("integer")
                        .HasColumnName("secuencial");

                    b.Property<decimal?>("Subtotal12")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("subtotal12");

                    b.Property<decimal?>("TotalDescuento")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalDescuento");

                    b.Property<decimal?>("TotalImporte")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalImporte");

                    b.Property<decimal?>("TotalSinImpuesto")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("totalSinImpuesto");

                    b.HasKey("IdProforma")
                        .HasName("proformas_pkey");

                    b.HasIndex("IdEstablecimiento");

                    b.HasIndex("IdPuntoEmision");

                    b.HasIndex("IdUsuario");

                    b.ToTable("proformas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Proveedores", b =>
                {
                    b.Property<Guid>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idProveedor")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Direccion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdCiudad")
                        .HasColumnType("uuid")
                        .HasColumnName("idCiudad");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid?>("IdTipoIdentificacion")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoIdentificacion");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("identificacion");

                    b.Property<string>("Observacion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observacion");

                    b.Property<string>("PaginaWeb")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("paginaWeb");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("razonSocial");

                    b.Property<string>("Representante")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("representante");

                    b.Property<string>("Telefono")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("telefono");

                    b.HasKey("IdProveedor")
                        .HasName("proveedores_pkey");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdTipoIdentificacion");

                    b.ToTable("proveedores", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Provincias", b =>
                {
                    b.Property<Guid>("IdProvincia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idProvincia")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdProvincia")
                        .HasName("provincias_pkey");

                    b.ToTable("provincias", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.PuntoEmisiones", b =>
                {
                    b.Property<Guid>("IdPuntoEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idPuntoEmision")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("direccion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<long?>("Nombre")
                        .HasColumnType("bigint")
                        .HasColumnName("nombre");

                    b.Property<bool?>("Predeterminado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("predeterminado")
                        .HasDefaultValueSql("false");

                    b.HasKey("IdPuntoEmision")
                        .HasName("puntoEmisiones_pkey");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("puntoEmisiones", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Secuenciales", b =>
                {
                    b.Property<Guid>("IdSecuencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idSecuencial")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid?>("IdTipoDocumento")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoDocumento");

                    b.Property<long?>("Nombre")
                        .HasColumnType("bigint")
                        .HasColumnName("nombre");

                    b.HasKey("IdSecuencial")
                        .HasName("secuenciales_pkey");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("secuenciales", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.SecuencialesProformas", b =>
                {
                    b.Property<Guid>("IdSecuencialesProforma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idSecuencialesProforma")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid?>("IdTipoDocumento")
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoDocumento");

                    b.Property<long?>("Nombre")
                        .HasColumnType("bigint")
                        .HasColumnName("nombre");

                    b.HasKey("IdSecuencialesProforma")
                        .HasName("secuencialesProformas_pkey");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("secuencialesProformas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TiempoFormaPagos", b =>
                {
                    b.Property<Guid>("IdTiempoFormaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idTiempoFormaPago")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTiempoFormaPago")
                        .HasName("tiempoFormaPagos_pkey");

                    b.ToTable("tiempoFormaPagos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoDocumentos", b =>
                {
                    b.Property<Guid>("IdTipoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoDocumento")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTipoDocumento")
                        .HasName("tipoDocumentos_pkey");

                    b.ToTable("tipoDocumentos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoEstadoDocumentos", b =>
                {
                    b.Property<int>("IdTipoEstadoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idTipoEstadoDocumento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTipoEstadoDocumento"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTipoEstadoDocumento")
                        .HasName("tipoEstadoDocumentos_pkey");

                    b.ToTable("tipoEstadoDocumentos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoEstadoSri", b =>
                {
                    b.Property<int>("IdTipoEstadoSri")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idTipoEstadoSri");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTipoEstadoSri"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTipoEstadoSri")
                        .HasName("tipoEstadoSri_pkey");

                    b.ToTable("tipoEstadoSri", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoIdentificaciones", b =>
                {
                    b.Property<Guid>("IdTipoIdentificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoIdentificacion")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTipoIdentificacion")
                        .HasName("tipoIdentificaciones_pkey");

                    b.ToTable("tipoIdentificaciones", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoIdentificacionesGeneracionDocumentos", b =>
                {
                    b.Property<Guid>("IdTipoIdentificacionesGeneracionDocumentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoIdentificacionesGeneracionDocumentos")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("Codigo")
                        .HasColumnType("integer")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTipoIdentificacionesGeneracionDocumentos")
                        .HasName("tipoIdentificacionesGeneracionDocumentos_pkey");

                    b.ToTable("tipoIdentificacionesGeneracionDocumentos", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoNegocios", b =>
                {
                    b.Property<Guid>("IdTipoNegocio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idTipoNegocio")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Codigo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdTipoNegocio")
                        .HasName("tipoNegocios_pkey");

                    b.ToTable("tipoNegocios", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.UsuarioEmpresas", b =>
                {
                    b.Property<Guid>("IdUsuarioEmpresas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idUsuarioEmpresas")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uuid")
                        .HasColumnName("idEmpresa");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid")
                        .HasColumnName("idUsuario");

                    b.HasKey("IdUsuarioEmpresas")
                        .HasName("usuarioEmpresas_pkey");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdUsuario");

                    b.ToTable("usuarioEmpresas", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Usuarios", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idUsuario")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("activo")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Clave")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("clave");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("nombre");

                    b.HasKey("IdUsuario")
                        .HasName("usuarios_pkey");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Ciudades", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Provincias", "IdProvinciaNavigation")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdProvincia")
                        .HasConstraintName("ciudades_idProvincia_fkey");

                    b.Navigation("IdProvinciaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Clientes", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Ciudades", "IdCiudadNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("clientes_idCiudad_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("cientes_empresas");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoIdentificaciones", "IdTipoIdentificacionNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdTipoIdentificacion")
                        .HasConstraintName("clientes_idTipoIdentificacion_fkey");

                    b.Navigation("IdCiudadNavigation");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdTipoIdentificacionNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetalleFacturas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Facturas", "IdFacturaNavigation")
                        .WithMany("DetalleFacturas")
                        .HasForeignKey("IdFactura")
                        .IsRequired()
                        .HasConstraintName("detalleFacturas_idFactura_fkey");

                    b.Navigation("IdFacturaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetalleFormaPagos", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Facturas", "IdFacturaNavigation")
                        .WithMany("DetalleFormaPagos")
                        .HasForeignKey("IdFactura")
                        .IsRequired()
                        .HasConstraintName("detalleFormaPagos_idFactura_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.TiempoFormaPagos", "IdTiempoFormaPagoNavigation")
                        .WithMany("DetalleFormaPagos")
                        .HasForeignKey("IdTiempoFormaPago")
                        .IsRequired()
                        .HasConstraintName("detalleFormaPagos_idTiempoFormaPago_fkey");

                    b.Navigation("IdFacturaNavigation");

                    b.Navigation("IdTiempoFormaPagoNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetallePrecioProductos", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Ivas", "IdIvaNavigation")
                        .WithMany("DetallePrecioProductos")
                        .HasForeignKey("IdIva")
                        .HasConstraintName("detallePrecioProductos_idIva_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Productos", "IdProductoNavigation")
                        .WithMany("DetallePrecioProductos")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("detallePrecioProductos_idProducto_fkey");

                    b.Navigation("IdIvaNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DetalleProformas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Proformas", "IdProformaNavigation")
                        .WithMany("DetalleProformas")
                        .HasForeignKey("IdProforma")
                        .IsRequired()
                        .HasConstraintName("idProforma");

                    b.Navigation("IdProformaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.DocumentosEmitir", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.TipoDocumentos", "IdTipoDocumentoNavigation")
                        .WithMany("DocumentosEmitir")
                        .HasForeignKey("IdTipoDocumento")
                        .HasConstraintName("documentosEmitir_idTipoDocumento_fkey");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Empleados", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Ciudades", "IdCiudadNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("empleados_idCiudad_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("empleados_empresas");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoIdentificaciones", "IdTipoIdentificacionNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdTipoIdentificacion")
                        .HasConstraintName("empleados_idTipoIdentificacion_fkey");

                    b.Navigation("IdCiudadNavigation");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdTipoIdentificacionNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Empresas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithOne("InverseIdEmpresaNavigation")
                        .HasForeignKey("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresa")
                        .IsRequired()
                        .HasConstraintName("empresas_empresas");

                    b.HasOne("Gestion_Administrativa_Api.Models.InformacionFirmas", "IdInformacionFirmaNavigation")
                        .WithMany("Empresas")
                        .HasForeignKey("IdInformacionFirma")
                        .HasConstraintName("fk_empresas_informacionfirmas");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoNegocios", "IdTipoNegocioNavigation")
                        .WithMany("Empresas")
                        .HasForeignKey("IdTipoNegocio")
                        .HasConstraintName("empresas_TipoNegocios");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdInformacionFirmaNavigation");

                    b.Navigation("IdTipoNegocioNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Establecimientos", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("Establecimientos")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("establecimientos_idEmpresa_fkey");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Facturas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.TipoEstadoDocumentos", "IdTipoEstadoDocumentoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdTipoEstadoDocumento")
                        .IsRequired()
                        .HasConstraintName("facturas_idTipoEstadoDocumento_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoEstadoSri", "IdTipoEstadoSriNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdTipoEstadoSri")
                        .HasConstraintName("facturas_idTipoEstadoSri_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("facturas_idUsuario_fkey");

                    b.Navigation("IdTipoEstadoDocumentoNavigation");

                    b.Navigation("IdTipoEstadoSriNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.InformacionAdicional", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Facturas", "IdFacturaNavigation")
                        .WithMany("InformacionAdicional")
                        .HasForeignKey("IdFactura")
                        .IsRequired()
                        .HasConstraintName("informacionAdicional_idFactura_fkey");

                    b.Navigation("IdFacturaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Productos", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("productos_empresas");

                    b.HasOne("Gestion_Administrativa_Api.Models.Ivas", "IdIvaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdIva")
                        .HasConstraintName("productos_idIva_fkey");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdIvaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Proformas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Establecimientos", "IdEstablecimientoNavigation")
                        .WithMany("Proformas")
                        .HasForeignKey("IdEstablecimiento")
                        .IsRequired()
                        .HasConstraintName("proformas_idEstablecimiento_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.PuntoEmisiones", "IdPuntoEmisionNavigation")
                        .WithMany("Proformas")
                        .HasForeignKey("IdPuntoEmision")
                        .IsRequired()
                        .HasConstraintName("proformas_idPuntoEmision_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Proformas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("proformas_idUsuario_fkey");

                    b.Navigation("IdEstablecimientoNavigation");

                    b.Navigation("IdPuntoEmisionNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Proveedores", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Ciudades", "IdCiudadNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("proveedores_idCiudad_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("proveedores_empresas");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoIdentificaciones", "IdTipoIdentificacionNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoIdentificacion")
                        .HasConstraintName("proveedores_idTipoIdentificacion_fkey");

                    b.Navigation("IdCiudadNavigation");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdTipoIdentificacionNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.PuntoEmisiones", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("PuntoEmisiones")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("puntoEmisiones_idEmpresa_fkey");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Secuenciales", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("Secuenciales")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("secuenciales_idEmpresa_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoDocumentos", "IdTipoDocumentoNavigation")
                        .WithMany("Secuenciales")
                        .HasForeignKey("IdTipoDocumento")
                        .HasConstraintName("secuenciales_idTipoDocumento_fkey");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.SecuencialesProformas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("SecuencialesProformas")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("secuencialesProformas_idEmpresa_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.TipoDocumentos", "IdTipoDocumentoNavigation")
                        .WithMany("SecuencialesProformas")
                        .HasForeignKey("IdTipoDocumento")
                        .HasConstraintName("secuencialesProformas_idTipoDocumento_fkey");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.UsuarioEmpresas", b =>
                {
                    b.HasOne("Gestion_Administrativa_Api.Models.Empresas", "IdEmpresaNavigation")
                        .WithMany("UsuarioEmpresas")
                        .HasForeignKey("IdEmpresa")
                        .IsRequired()
                        .HasConstraintName("usuarioEmpresas_idEmpresa_fkey");

                    b.HasOne("Gestion_Administrativa_Api.Models.Usuarios", "IdUsuarioNavigation")
                        .WithMany("UsuarioEmpresas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("usuarioEmpresas_idUsuario_fkey");

                    b.Navigation("IdEmpresaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Ciudades", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Empresas", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Establecimientos");

                    b.Navigation("InverseIdEmpresaNavigation");

                    b.Navigation("Productos");

                    b.Navigation("Proveedores");

                    b.Navigation("PuntoEmisiones");

                    b.Navigation("Secuenciales");

                    b.Navigation("SecuencialesProformas");

                    b.Navigation("UsuarioEmpresas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Establecimientos", b =>
                {
                    b.Navigation("Proformas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Facturas", b =>
                {
                    b.Navigation("DetalleFacturas");

                    b.Navigation("DetalleFormaPagos");

                    b.Navigation("InformacionAdicional");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.InformacionFirmas", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Ivas", b =>
                {
                    b.Navigation("DetallePrecioProductos");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Productos", b =>
                {
                    b.Navigation("DetallePrecioProductos");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Proformas", b =>
                {
                    b.Navigation("DetalleProformas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Provincias", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.PuntoEmisiones", b =>
                {
                    b.Navigation("Proformas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TiempoFormaPagos", b =>
                {
                    b.Navigation("DetalleFormaPagos");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoDocumentos", b =>
                {
                    b.Navigation("DocumentosEmitir");

                    b.Navigation("Secuenciales");

                    b.Navigation("SecuencialesProformas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoEstadoDocumentos", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoEstadoSri", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoIdentificaciones", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.TipoNegocios", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("Gestion_Administrativa_Api.Models.Usuarios", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Proformas");

                    b.Navigation("UsuarioEmpresas");
                });
#pragma warning restore 612, 618
        }
    }
}
